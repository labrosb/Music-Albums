{"version":3,"sources":["assets/icons/loading.svg","state/reducers/index.js","state/reducers/topAlbums.js","state/actions/types.js","state/reducers/favorites.js","state/reducers/favoritesMap.js","state/reducers/error.js","state/store.js","utilities/api.js","state/actions/error.js","state/actions/topAlbums.js","state/actions/favorites.js","state/actions/index.js","state/connector.js","components/Common/Header/index.js","components/Loading/index.js","components/Error/index.js","components/Common/PreviewCard/index.js","components/Common/AlbumsList/index.js","components/TopAlbums/FilterBar/index.js","components/TopAlbums/index.js","components/AlbumDetails/Cover/index.js","components/AlbumDetails/Details/index.js","components/AlbumDetails/index.js","components/Favorites/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","reducers","topAlbums","state","action","type","list","favorites","concat","album","filter","item","id","favoritesMap","error","errorType","config","key","whitelist","storage","reducer","persistCombineReducers","initialState","albums","rootReducer","middlewares","thunk","store","enhancer","compose","applyMiddleware","createStore","configureStore","persistStore","axios","create","baseURL","process","headers","Accept","setError","errorMsg","resetError","dispatch","getState","getAlbumById","find","attributes","setTopAlbums","topList","map","index","thumbnail","smallImage","label","replace","thumbSmall","name","artist","price","category","releaseDate","link","href","rights","rank","getTopAlbums","limit","Api","get","then","res","status","data","feed","entry","catch","addFavorite","removeFavorite","setFavoriteRankings","forEach","favorite","element","findIndex","topAlbum","toggleFavorite","isFavorite","ActionCreators","ReduxConnector","component","connect","bindActionCreators","Actions","Header","title","active","noBackButton","history","useHistory","redirectTop100","useCallback","push","pathname","redirectToFavorites","goBack","className","onClick","icon","faArrowLeft","faMusic","LoadingContent","header","src","loadingSpinner","alt","Error","message","Preview","onCardClick","onFavoriteClick","ev","stopPropagation","faHeart","React","memo","isFavoritesList","length","includes","props","placeholder","onFiltered","onChange","target","searchParam","RegExp","value","toUpperCase","results","test","faSearch","useState","listReceived","setListReceived","filteredAlbums","setFilteredAlbums","useEffect","Cover","Details","albumData","onViewMoreClick","window","location","style","backgroundImage","withRouter","match","setAlbumData","useMemo","params","App","exact","path","to","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.1168ca00.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.4e722e12.svg\";","import topAlbums from './topAlbums';\nimport favorites from './favorites';\nimport favoritesMap from './favoritesMap';\nimport error from './error';\n\nconst reducers = {\n  topAlbums,\n  favorites,\n  favoritesMap,\n  error\n};\n\nexport default reducers;\n","import * as types from '../actions/types';\n\nexport default function topAlbums(state = null, action) {\n  switch (action.type) {\n    case types.SET_TOP_ALBUMS:\n      return action.list;\n\n    default:\n      return state;\n  }\n}\n","export const SET_TOP_ALBUMS = 'SET_FAVORITES';\nexport const UPDATE_FAVORITE_RANKS = 'UPDATE_FAVORITE_RANKS';\nexport const ADD_FAVORITE = 'ADD_FAVORITE';\nexport const REMOVE_FAVORITE = 'REMOVE_FAVORITE';\nexport const SET_ERROR = 'SET_ERROR';\n","import * as types from '../actions/types';\n\nexport default function favorites(state = null, action) {\n  switch (action.type) {\n    case types.ADD_FAVORITE:\n      return state.concat([action.album]);\n    case types.REMOVE_FAVORITE:\n      return state.filter(item => item.id !== action.id);\n    case types.UPDATE_FAVORITE_RANKS:\n      return { ...action.favorites };\n\n    default:\n      return state;\n  }\n}\n","import * as types from '../actions/types';\n\nexport default function favoritesMap(state = null, action) {\n  switch (action.type) {\n    case types.ADD_FAVORITE:\n      return state.concat([action.album.id]);\n    case types.REMOVE_FAVORITE:\n      return state.filter(item => item !== action.id);\n\n    default:\n      return state;\n  }\n}\n","import * as types from '../actions/types';\n\nexport default function error(state = null, action) {\n  switch (action.type) {\n    case types.SET_ERROR:\n      return { ...state, [action.errorType]: action.error };\n\n    default:\n      return state;\n  }\n}\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport { persistCombineReducers, persistStore } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\n\nconst config = {\n  key: 'root',\n  whitelist: ['favorites', 'favoritesMap'],\n  storage\n};\n\nconst reducer = persistCombineReducers(config, reducers);\n\nconst initialState = {\n  topAlbums: [],\n  favorites: [],\n  favoritesMap: [],\n  error: {\n    albums: null\n  }\n};\n\nconst rootReducer = (state, action) => reducer(state, action);\n\nconst middlewares = [thunk];\n\n// Use redux-logger only on development mode\nif (process.env.NODE_ENV === 'development') {\n  const { logger } = require('redux-logger'); // eslint-disable-line\n\n  middlewares.push(logger);\n}\n\n// Configure a store that uses the defined middlewares\nfunction configureStore() {\n  const enhancer = compose(\n    applyMiddleware(...middlewares)\n  );\n\n  return createStore(rootReducer, initialState, enhancer);\n}\n\nconst store = configureStore();\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n","import axios from 'axios';\n\nconst apiHost = process.env.REACT_APP_API_HOST;\n\nexport default axios.create({\n  baseURL: apiHost,\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  }\n});\n","import * as types from './types';\n\nexport function setError(errorType, errorMsg) {\n  return {\n    type: types.SET_ERROR,\n    error: errorMsg,\n    errorType\n  };\n}\n\nexport function resetError(errorType) {\n  return (dispatch, getState) => {\n    // Check if an error of the given type exists\n    const error = getState().error[errorType];\n    // if it exists, reset...\n    if (error) {\n      dispatch(setError(errorType, null));\n    }\n  };\n}\n","import Api from '../../utilities/api';\nimport * as types from './types';\nimport { setError, resetError } from './error';\n\nfunction formatAlbumData(album) {\n  // Getting the big image which is not provided by the API\n  const getBigThumb = smallImage => (\n    smallImage.replace('55x55bb', '500x500bb')\n  );\n  // Adding rankings and big image\n  return album.map((item, index) => ({\n    id: item.id.attributes['im:id'],\n    thumbnail: getBigThumb(item['im:image'][0].label),\n    thumbSmall: item['im:image'][0].label,\n    name: item['im:name'].label,\n    artist: item['im:artist'].label,\n    price: item['im:price'].label,\n    category: item.category.attributes.label,\n    releaseDate: item['im:releaseDate'].attributes.label,\n    link: item.link.attributes.href,\n    rights: item.rights.label,\n    rank: index + 1\n  }));\n}\n\nexport function getAlbumById(id) {\n  return (dispatch, getState) => {\n    const albums = getState().topAlbums;\n    const myAlbum = albums.find(album => album.id.attributes['im:id'] === id);\n\n    return myAlbum;\n  };\n}\n\nexport function setTopAlbums(topList) {\n  const list = formatAlbumData(topList);\n\n  return {\n    type: types.SET_TOP_ALBUMS,\n    list\n  };\n}\n\nexport function getTopAlbums(limit) {\n  return dispatch => {\n    // Resets error (only if an error has already taken place)\n    dispatch(resetError('albums'));\n    // Body of a query to an existing server\n    return Api.get(`/topalbums/limit=${limit}/json`)\n      .then(res => {\n        if (res.status === 200 && res.data.feed) {\n          dispatch(setTopAlbums(res.data.feed.entry));\n        } else {\n          dispatch(setError('albums', 'Failed to retrieve albums.'));\n        }\n      })\n      .catch(() => {\n        dispatch(setError('albums', 'Failed to retrieve albums.'));\n      });\n  };\n}\n","import * as types from './types';\n\nfunction updateFavoriteRanks(favorites) {\n  return {\n    type: types.UPDATE_FAVORITE_RANKS,\n    favorites\n  };\n}\n\nexport function addFavorite(album) {\n  return {\n    type: types.ADD_FAVORITE,\n    album\n  };\n}\n\nexport function removeFavorite(id) {\n  return {\n    type: types.REMOVE_FAVORITE,\n    id\n  };\n}\n\n// Rankings are constantly change so they need to be updated in the stored favorites\nexport function setFavoriteRankings() {\n  return (dispatch, getState) => {\n    const { topAlbums, favorites } = getState().topAlbums;\n\n    if (topAlbums) {\n      favorites.forEach(favorite => {\n        const element = topAlbums.findIndex(\n          topAlbum => favorite.id === topAlbum.id\n        );\n        if (element > -1) favorites.rank = element + 1;\n        else favorites.rank = null;\n      });\n\n      updateFavoriteRanks(favorites);\n    }\n  };\n}\n\nexport function toggleFavorite(isFavorite, album) {\n  return dispatch => {\n    if (!isFavorite) {\n      dispatch(addFavorite(album));\n    } else {\n      dispatch(removeFavorite(album.id));\n    }\n  };\n}\n","import * as topAlbums from './topAlbums';\nimport * as favorites from './favorites';\nimport * as error from './error';\n\nconst ActionCreators = {\n  ...topAlbums,\n  ...favorites,\n  ...error\n};\n\nexport default ActionCreators;\n","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport Actions from './actions';\n\nfunction ReduxConnector(component) {\n  const mapStateToProps = state => state;\n\n  const mapDispatchToProps = dispatch => bindActionCreators(Actions, dispatch);\n\n  return connect(mapStateToProps, mapDispatchToProps)(component);\n}\n\nexport default ReduxConnector;\n","import React, { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMusic, faArrowLeft } from '@fortawesome/free-solid-svg-icons';\n\nimport './Header.scss';\n\nfunction Header({ title, active, noBackButton }) {\n  const history = useHistory();\n\n  const redirectTop100 = useCallback(() => {\n    history.push({ pathname: '/' });\n  }, [history]);\n\n  const redirectToFavorites = useCallback(() => {\n    history.push({ pathname: '/my-favorites' });\n  }, [history]);\n\n  const goBack = useCallback(() => {\n    history.goBack();\n  }, [history]);\n\n  const renderBackButton = () => {\n    if (!noBackButton) {\n      return (\n        <div\n          className=\"back-button\"\n          onClick={goBack}\n        >\n          <FontAwesomeIcon\n            className=\"icon\"\n            icon={faArrowLeft}\n          />\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"header\">\n      {renderBackButton()}\n      <div className=\"title\">\n        <h1 className=\"title-label\">\n          {title || 'Music'}\n        </h1>\n        <FontAwesomeIcon\n          className=\"icon\"\n          icon={faMusic}\n        />\n      </div>\n      <div className=\"menu\">\n        <span\n          className={`route ${active === 'top100' ? 'active' : ''}`}\n          onClick={redirectTop100}\n        >\n          Top 100\n        </span>\n        <span\n          className={`route ${active === 'favorites' ? 'active' : ''}`}\n          onClick={redirectToFavorites}\n        >\n          My Favorites\n        </span>\n      </div>\n    </div>\n  );\n}\n\nHeader.propTypes = {\n  title: PropTypes.string,\n  active: PropTypes.string,\n  noBackButton: PropTypes.bool\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../Common/Header';\nimport loadingSpinner from '../../assets/icons/loading.svg';\nimport './Loading.scss';\n\nfunction LoadingContent({ header, active, noBackButton }) {\n  return (\n    <>\n      <Header title={header} {...{ active, noBackButton }} />\n      <div className=\"alt-content\">\n        <img\n          className=\"spinner-icon\"\n          src={loadingSpinner}\n          alt=\"Loading...\"\n        />\n      </div>\n    </>\n  );\n}\n\nexport default LoadingContent;\n\nLoadingContent.propTypes = {\n  header: PropTypes.string,\n  active: PropTypes.string,\n  noBackButton: PropTypes.bool\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../Common/Header';\nimport './Error.scss';\n\nfunction Error({ header, message, active, noBackButton }) {\n  return (\n    <>\n      <Header title={header} {...{ active, noBackButton }} />\n      <div className=\"error-content\">\n        <h2 className=\"error-title\">Error!</h2>\n        <p className=\"error-text\">{message || 'An error occured!'}</p>\n      </div>\n    </>\n  );\n}\n\nexport default Error;\n\nError.propTypes = {\n  header: PropTypes.string,\n  message: PropTypes.string,\n  active: PropTypes.string,\n  noBackButton: PropTypes.bool\n};\n","import React, { useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\nimport './PreviewCard.scss';\n\n// Preview Card Component used as list / Catalogue Item\n\nfunction Preview({ toggleFavorite, isFavorite, album }) {\n  const history = useHistory();\n  const onCardClick = useCallback(() => {\n    history.push({\n      pathname: `/album-page/${album.id}`,\n      state: album\n    });\n  }, [album, history]);\n\n  const onFavoriteClick = useCallback(ev => {\n    ev.stopPropagation();\n    toggleFavorite(isFavorite, album);\n  }, [isFavorite, album, toggleFavorite]);\n\n  return (\n    <div\n      className=\"card-container\"\n      onClick={onCardClick}\n    >\n      <img\n        className=\"card-image\"\n        src={album.thumbnail}\n        alt={album.thumbSmall}\n      />\n      <div\n        className={`card-favorite ${isFavorite ? 'active' : ''}`}\n        onClick={onFavoriteClick}\n      >\n        <FontAwesomeIcon\n          className=\"favorite-icon\"\n          icon={faHeart}\n        />\n      </div>\n      <div className=\"inline-elements\">\n        <span className=\"card-rank\">\n          {album.rank || 'X'}\n        </span>\n        <div className=\"card-details\">\n          <p className=\"card-detail primary\">\n            {album.name}\n          </p>\n          <p className=\"card-detail secondary\">\n            {album.artist}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nPreview.propTypes = {\n  isFavorite: PropTypes.bool,\n  album: PropTypes.object,\n  toggleFavorite: PropTypes.func\n};\n\nexport default Preview;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Preview from '../PreviewCard';\nimport './AlbumsList.scss';\n\n// Component implementing a list / catalogue of album items\n\nfunction AlbumList({ albums, isFavoritesList, toggleFavorite, favoritesMap }) {\n  const list = () => {\n    if (albums && albums.length > 0) {\n      return albums.map(album => (\n        <div key={`albumList-${album.id}`}>\n          <Preview\n            isFavorite={isFavoritesList || favoritesMap.includes(album.id)}\n            {...{ album, toggleFavorite }}\n          />\n        </div>\n      ));\n    }\n    return (\n      <div className=\"altMessage\">\n        <p>No Albums Found...</p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"list\">{list()}</div>\n  );\n}\n\nAlbumList.propTypes = {\n  albums: PropTypes.array,\n  favoritesMap: PropTypes.array,\n  toggleFavorite: PropTypes.func,\n  isFavoritesList: PropTypes.bool\n};\n\nexport default React.memo(AlbumList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport './FilterBar.scss';\n\nfunction FilterBar(props) {\n  const { data, placeholder, onFiltered } = props;\n\n  const search = ({ target }) => {\n    const searchParam = new RegExp(target.value.toUpperCase());\n    const results = data.filter(\n      album => searchParam.test(album.name.toUpperCase())\n    );\n    onFiltered(results);\n  };\n\n  return (\n    <div className=\"filter-container\">\n      <input\n        type=\"text\"\n        className=\"filter-input\"\n        placeholder={placeholder || 'Search'}\n        onChange={search}\n      />\n      <FontAwesomeIcon\n        className=\"search-icon\"\n        icon={faSearch}\n      />\n    </div>\n  );\n}\n\nFilterBar.propTypes = {\n  data: PropTypes.array,\n  onFiltered: PropTypes.func,\n  placeholder: PropTypes.string\n};\n\nexport default React.memo(FilterBar);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport ReduxConnector from '../../state/connector';\nimport Loading from '../Loading';\nimport Error from '../Error';\nimport Header from '../Common/Header';\nimport AlbumsList from '../Common/AlbumsList';\nimport FilterBar from './FilterBar';\n\nfunction TopAlbums({\n  error,\n  getTopAlbums,\n  favoritesMap,\n  toggleFavorite,\n  topAlbums\n}) {\n  const [listReceived, setListReceived] = useState(false);\n  const [filteredAlbums, setFilteredAlbums] = useState();\n  useEffect(() => {\n    getTopAlbums(100)\n      .then(() => setListReceived(true));\n  }, [getTopAlbums, setListReceived]);\n\n  if (error.albums) {\n    return (\n      <Error noBackButton active=\"top100\" message={error.albums} />\n    );\n  }\n\n  if (!listReceived) {\n    return (<Loading noBackButton active=\"top100\" />);\n  }\n\n  return (\n    <>\n      <Header noBackButton active=\"top100\" />\n      <div className=\"content\">\n        <FilterBar\n          placeholder=\"Search Titles...\"\n          onFiltered={setFilteredAlbums}\n          data={topAlbums}\n        />\n        <AlbumsList\n          albums={filteredAlbums || topAlbums}\n          {...{ toggleFavorite, favoritesMap }}\n        />\n      </div>\n    </>\n  );\n}\n\nTopAlbums.propTypes = {\n  error: PropTypes.object,\n  topAlbums: PropTypes.array,\n  favoritesMap: PropTypes.array,\n  getTopAlbums: PropTypes.func,\n  toggleFavorite: PropTypes.func\n};\n\nexport default ReduxConnector(TopAlbums);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Cover.scss';\n\nfunction Cover({ thumbnail, rank }) {\n  const renderRank = () => {\n    if (rank) {\n      return (\n        <div className=\"album-ranking\">\n          {rank}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"image-container\">\n      <img\n        className=\"album-image\"\n        src={thumbnail}\n        alt=\"Thumbnail\"\n      />\n      {renderRank()}\n    </div>\n  );\n}\n\nCover.propTypes = {\n  thumbnail: PropTypes.string,\n  rank: PropTypes.number\n};\n\nexport default Cover;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHeart } from '@fortawesome/free-solid-svg-icons';\nimport './Details.scss';\n\nfunction Details({ albumData, toggleFavorite, isFavorite }) {\n  const onViewMoreClick = useCallback(() => {\n    window.location.href = albumData.link;\n  }, [albumData.link]);\n\n  const onFavoriteClick = useCallback(() => {\n    toggleFavorite(isFavorite, albumData);\n  }, [albumData, isFavorite, toggleFavorite]);\n\n  return (\n    <div className=\"album-details\">\n      <div className=\"details-row\">\n        <div\n          className=\"light-cover\"\n          style={{ backgroundImage: `url(${albumData.thumbnail})` }}\n        />\n        <div className=\"details-column\">\n          <div className=\"album-artist\">\n            {albumData.artist}\n          </div>\n          <div className=\"album-name\">\n            {albumData.name}\n          </div>\n          <br />\n          <div className=\"album-detail\">\n            Music: {albumData.category}\n          </div>\n          <div className=\"album-detail\">\n            Int.Release {albumData.releaseDate}\n          </div>\n        </div>\n        <div className=\"album-price\">\n          {albumData.price}\n        </div>\n      </div>\n      <div className=\"album-buttons\">\n        <div\n          className=\"album-button favorite-button\"\n          onClick={onFavoriteClick}\n        >\n          <FontAwesomeIcon\n            className=\"button-icon\"\n            icon={faHeart}\n          />\n          <span>{isFavorite ? 'Remove' : 'Add'}</span>\n        </div>\n        <div\n          className=\"album-button\"\n          onClick={onViewMoreClick}\n        >\n          View More\n        </div>\n      </div>\n    </div>\n  );\n}\n\nDetails.propTypes = {\n  albumData: PropTypes.object,\n  isFavorite: PropTypes.bool,\n  toggleFavorite: PropTypes.func\n};\n\nexport default Details;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport ReduxConnector from '../../state/connector';\nimport Header from '../Common/Header';\nimport Loading from '../Loading';\nimport Error from '../Error';\nimport CoverImage from './Cover';\nimport Details from './Details';\nimport './AlbumDetails.scss';\n\nconst header = 'Album';\n\nfunction TopAlbums({\n  error,\n  location,\n  match,\n  getTopAlbums,\n  topAlbums,\n  getAlbumById,\n  favoritesMap,\n  toggleFavorite\n}) {\n  const [listReceived, setListReceived] = useState(() => !!topAlbums.length);\n  const [albumData, setAlbumData] = useState(() => location.state || {});\n\n  const isFavorite = useMemo(() => (\n    favoritesMap.includes(albumData.id)\n  ), [albumData, favoritesMap]);\n\n  useEffect(() => {\n    // In case of pasting a link rather than navigating!\n    // It wont work if the album is not in top 100 anymore.\n    // An api call retrieving the album details directly is a better approach,\n    // however there is an issue creating a profile to achieve a token\n    if (!location.state) {\n      const { id } = match.params;\n      if (!topAlbums.length) {\n        getTopAlbums(100).then(() => {\n          const album = getAlbumById(id);\n          setAlbumData(album);\n          setListReceived(true);\n        });\n      } else {\n        const album = getAlbumById(id);\n        setAlbumData(album);\n      }\n    } else {\n      setListReceived(true);\n    }\n  }, [\n    topAlbums,\n    getTopAlbums,\n    getAlbumById,\n    setListReceived,\n    location.state,\n    match.params\n  ]);\n\n  if (error.albums) {\n    return (\n      <Error message={error.albums} {...{ header }} />\n    );\n  }\n\n  if (!listReceived && !location.state) {\n    return (\n      <Loading {...{ header }} />\n    );\n  }\n\n  return (\n    <>\n      <Header title={header} />\n      <div className=\"content\">\n        <div className=\"content-row\">\n          <CoverImage\n            thumbnail={albumData.thumbnail}\n            rank={albumData.rank}\n          />\n          <Details {...{ albumData, isFavorite, toggleFavorite }} />\n        </div>\n        <p className=\"rights-text\">{albumData.rights}</p>\n      </div>\n    </>\n  );\n}\n\nTopAlbums.propTypes = {\n  error: PropTypes.object,\n  topAlbums: PropTypes.array,\n  favoritesMap: PropTypes.array,\n  getTopAlbums: PropTypes.func,\n  getAlbumById: PropTypes.func,\n  toggleFavorite: PropTypes.func,\n  location: PropTypes.object,\n  match: PropTypes.object\n};\n\nexport default withRouter(\n  ReduxConnector(React.memo(TopAlbums))\n);\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport ReduxConnector from '../../state/connector';\nimport Header from '../Common/Header';\nimport AlbumsList from '../Common/AlbumsList';\n\nfunction Favorites({\n  favorites,\n  toggleFavorite,\n  setFavoriteRankings\n}) {\n  useEffect(() => {\n    // Retrieving the actual rankings which change over time\n    setFavoriteRankings();\n  }, [setFavoriteRankings]);\n\n  return (\n    <>\n      <Header active=\"favorites\" />\n      <div className=\"content\">\n        <AlbumsList\n          isFavoritesList\n          albums={favorites}\n          {...{ toggleFavorite }}\n        />\n      </div>\n    </>\n  );\n}\n\nFavorites.propTypes = {\n  favorites: PropTypes.array,\n  toggleFavorite: PropTypes.func,\n  setFavoriteRankings: PropTypes.func\n};\n\nexport default ReduxConnector(Favorites);\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './state/store';\nimport AlbumsList from './components/TopAlbums';\nimport AlbumDetails from './components/AlbumDetails';\nimport Favorites from './components/Favorites';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route exact path=\"Music-albums/top-100\">\n            <AlbumsList />\n          </Route>\n          <Route exact path=\"Music-albums/album-page/:id\">\n            <AlbumDetails />\n          </Route>\n          <Route exact path=\"Music-albums/my-favorites\">\n            <Favorites />\n          </Route>\n          <Redirect to=\"Music-albums/top-100\" />\n        </Switch>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}